// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String   @id @default(uuid())
  first_name String   @db.VarChar(255)
  last_name  String   @db.VarChar(255)
  username   String   @unique @db.VarChar(255)
  password   String   @db.VarChar(255)
  email      String   @unique @db.VarChar(255)
  profile    Profile?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  roles      Role[]
  spaces     Space[]
  blogs      Blog[]
}

model Profile {
  id          String     @id @default(uuid())
  bio         String?
  image       FileModel? @relation(fields: [fileModelId], references: [id])
  userId      String     @unique
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  fileModelId String?
}

model Role {
  id          String   @id @default(uuid())
  name        String   @db.VarChar(255)
  description String   @db.VarChar(255)
  scop        RoleScop
  code        RoleCode
  users       User[]
  space       Space?   @relation(fields: [spaceName], references: [name], onDelete: Cascade, onUpdate: NoAction)
  spaceName   String?

  @@unique([name, code, scop, spaceName])
}

model Space {
  id          String     @id @default(uuid())
  name        String     @unique
  users       User[]
  roles       Role[]
  image       FileModel? @relation(fields: [fileModelId], references: [id])
  isPrivate   Boolean    @default(true)
  description String?
  settings    Setting[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  events      Event[]
  fileModelId String?
  blogs       Blog[]
}

model Setting {
  id        String @id @default(uuid())
  name      String @unique
  value     Json?
  space     Space  @relation(fields: [spaceName], references: [name], onDelete: Cascade, onUpdate: NoAction)
  spaceName String
}

model Category {
  id         String     @id @default(uuid())
  name       String     @unique
  events     Event[]
  category   Category?  @relation("category", fields: [categoryId], references: [id])
  categories Category[] @relation("category")
  categoryId String?
  blogs      Blog[]
}

model Event {
  id          String     @id @default(uuid())
  title       String
  startAt     DateTime
  endAt       DateTime
  fullDay     Boolean    @default(false)
  repeat      Repeat     @default(NO_REPEAT)
  published   Boolean    @default(false)
  isPrivate   Boolean    @default(true)
  image       FileModel? @relation(fields: [fileModelId], references: [id])
  location    String?
  description String?
  category    Category?  @relation(fields: [categoryId], references: [id])
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  categoryId  String?
  space       Space?     @relation(fields: [spaceName], references: [name], onDelete: SetNull, onUpdate: NoAction)
  spaceName   String?
  fileModelId String?
}

model Blog {
  id          String     @id @default(uuid())
  title       String
  slug        String     @unique
  author      User       @relation(fields: [authorId], references: [id])
  published   Boolean?    @default(false)
  image       FileModel? @relation(fields: [fileModelId], references: [id])
  description String
  content     String
  keyword     String?
  category    Category?  @relation(fields: [categoryId], references: [id])
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  publishedAt DateTime?
  categoryId  String?
  space       Space?     @relation(fields: [spaceName], references: [name], onDelete: SetNull, onUpdate: NoAction)
  spaceName   String?
  fileModelId String?
  authorId    String
}

model Contact {
  id      String @id @default(uuid())
  name    String
  email   String
  phone   String
  subject String
  message String
}

model FileModel {
  id           String    @id @default(uuid())
  originalName String
  name         String    @unique
  type         String
  size         Float
  profiles     Profile[]
  events       Event[]
  spaces       Space[]
  blogs        Blog[]
}

enum Repeat {
  NO_REPEAT   @map("NO_REPEAT")
  EVERY_DAY   @map("EVERY_DAY")
  EVERY_WEEK  @map("EVERY_WEEK")
  EVERY_MONTH @map("EVERY_MONTH")
  EVERY_YEAR  @map("EVERY_YEAR")
}

enum RoleScop {
  SUPER @map("SUPER")
  SPACE @map("SPACE")
}

enum RoleCode {
  ADMIN  @map("ADMIN")
  EDITOR @map("EDITOR")
  MEMBER @map("MEMBER")
}
